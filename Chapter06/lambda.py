# 람다 표현식
# 식별자 없이 실행 가능한 함수
# 함수 선언 없이도 하나의 식으로 함수를 단순하게 표현할 수 있다.

s = ['2 A', '1 B', '4 C', '1 A']
sorted(s)
print(s)
# ['2 A', '1 B', '4 C', '1 A']

# 만약 우리가 원하는 결과가 각 요소의 번호 순 정렬이 아닌 그 뒤의 문자 순 정렬을 원하며,
# 문자가 동일한 경우에만 그 앞 번호순으로 정렬되는 형태를 희망한다면
# 람다 표현식을 이용하여 해결할 수 있다.

# 리스트의 각 요소를 풀어서 별도 처리를 해줘야 하는 경우, 람다 표현식을 사용할 수 있다.
# 즉 람다는 간단한 함수를 쉽게 선언하는 방법이라 할 수 있다.
# 람다를 사용하지 않고 직접 함수를 선언한다면 다음과 같은 형태가 된다.

def func(x):
    return x.split()[1], x.split()[0]

s.sort(key=func)
print(s)
# ['1 A', '2 A', '1 B', '4 C']

# 이를 람다 표현식으로 표현하면, 별도 함수를 선언하지 않고도 쉽게 처리할 수 있다.

t = sorted(s, key=lambda x: (x.split()[1], x.split()[0]))
print(t)
# ['1 A', '2 A', '1 B', '4 C']

# 하지만 람다 표현식은 코드가 길어지고 map이나 filter와 함께 섞어 사용하면
# 가독성이 매우 떨어지므로 주의해야 한다.
